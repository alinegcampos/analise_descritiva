# -*- coding: utf-8 -*-
"""Analise Descritiva.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SAs1vgfuNewTgNo9fyTy8PvZYlZPiFXW

### Análise Descritiva

1 - Numa amostra de 8 funcionários de uma empresa observou-se duas variáveis: anos de trabalho e número de promoções recebidas. Calcule a correlação entre elas:
"""

import pandas as pd

dados = {'promocoes' : [2,2,1,2,0,3,1,0],
         'anos_de_trabalho' : [5,6,6,7,7,8,8,8]}

df = pd.DataFrame(dados)

df

rho = df.promocoes.corr(df.anos_de_trabalho)
print('Correlação utilizando pandas: ',rho)

"""2 - Uma nutricionista procurou avaliar se a massa muscular (Y) de um conjunto de pacientes diminuía com a idade (X).  Calcule o coeficiente de correlação linear dessa relação."""

import numpy as np

massa_muscular = np.array([82,91,100,68,87,73,78,80,65,84,116,76,97,100,105,77,73,78])
idade = np.array([71,64,43,67,56,73,68,56,76,65,45,58,45,53,49,78,73,68])

rho = np.corrcoef(massa_muscular,idade)
print('Correlação utilizando numpy: ',rho)

"""3 - Foram coletadas as informações de uma amostra de famílias para entender quantos cartões de créditos elas possuem e quais variáveis explicam isto:"""

import pandas as pd

dados = {'id_familia':[1,2,3,4,5,6,7,8],
         'n_cartoes': [4,6,6,7,8,7,8,10],
         'tamanho_familia': [2,2,4,4,5,5,6,6],
         'renda_familiar':[14,16,14,17,18,21,17,25],
         'num_automoveis': [1,2,2,1,3,2,1,2]}

df = pd.DataFrame(dados)

df

"""- Correlações:"""

rho = df.id_familia.corr(df.n_cartoes)
print('Correlação utilizando pandas: ',rho)
rho = df.tamanho_familia.corr(df.n_cartoes)
print('Correlação utilizando pandas: ',rho)
rho = df.renda_familiar.corr(df.n_cartoes)
print('Correlação utilizando pandas: ',rho)
rho = df.num_automoveis.corr(df.n_cartoes)
print('Correlação utilizando pandas: ',rho)

"""* Exiba as correlações em gráficos:"""

# importando os pacotes necessários
import numpy as np
import matplotlib.pyplot as plt
 
# exemplo de plots determinísticos
np.random.seed(42)
det_x = np.arange(0,10,0.1)
det_y = 2 * det_x + 3
 
# exemplo de plots não determinísticos
non_det_x = np.arange(0, 10, 0.1)
non_det_y = 2 * non_det_x + np.random.normal(size=100)
 
# plotar determinísticos vs. não determinísticos
fig, axs = plt.subplots(1, 2, figsize=(10,4), constrained_layout=True)
 
axs[0].scatter(det_x, det_y, s=2)
axs[0].set_title("Determinístico")
 
axs[1].scatter(non_det_x, non_det_y, s=2)
axs[1].set_title("Não Determinístico")
 
plt.show()

"""## Aula 3

### Exercício 01

- Crie um modelo de Regressão Linear Simples para o Exercício 3 da Aula 01.

**Dica**: para transformar uma série pandas em uma matriz coluna utilize

`x = df[['minha_coluna_pandas']]`
"""

import pandas as pd

dados = {'id_familia':[1,2,3,4,5,6,7,8],
         'n_cartoes': [4,6,6,7,8,7,8,10],
         'tamanho_familia': [2,2,4,4,5,5,6,6],
         'renda_familiar':[14,16,14,17,18,21,17,25],
         'num_automoveis': [1,2,2,1,3,2,1,2]}

df = pd.DataFrame(dados)

df

"""Cálculo das correlações lineares:"""

df.corr()

"""Definição da variável resposta e da variável explicativa:"""

x = df[['tamanho_familia', 'renda_familiar']]
y = df['n_cartoes']

"""Importação do pacote: """

from sklearn.linear_model import LinearRegression

"""Estanciar modelo:"""

model = LinearRegression()

"""Treinar modelo:"""

model.fit(x,y)

"""Previsão:"""

y_pred = model.predict(x)
print(y_pred)

"""Coeficientes e o BO:"""

print('Coeficientes: ', model.coef_)
print('b0:', model.intercept_)

"""Erro"""

erro = y - y_pred
print(erro)
erro.mean()
erro.mean()

"""### Exercício 02

- Crie um modelo de Regressão Linear Múltipla para o Exercício 3 da Aula 01.
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

import pandas as pd

dados = {'id_familia':[1,2,3,4,5,6,7,8],
         'n_cartoes': [4,6,6,7,8,7,8,10],
         'tamanho_familia': [2,2,4,4,5,5,6,6],
         'renda_familiar':[14,16,14,17,18,21,17,25],
         'num_automoveis': [1,2,2,1,3,2,1,2]}

df = pd.DataFrame(dados)

#Correlacoes
df.corr()

"""Existe colinearidade? Sim"""

df.tamanho_familia.corr(df.renda_familiar)

# Variável dependente e indepedente:
x = df[['tamanho_familia', 'renda_familiar']]
y = df['n_cartoes']

"""Treinamento modelo:"""

# Importação da biblioteca
import statsmodels.api as sm

# Adição da constante para calcular B0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes"""

print(modelo.params)

"""Equação descreve o modelo"""

Y = 0.481 + 0.63 * X1 + 0.21 * X2

"""Y previsto pelo modelo"""

y_pred = modelo.predict(x)
print(y_pred)

"""REsiduo"""

y_real = y
residuo = y_real - y_pred
print(residuo)

"""Gráfico de dispersão do ruído"""

# Importação da biblioteca de visualização
import seaborn as sns

eixo = sns.scatterplot(x=df.tamanho_familia, y=residuo)
eixo.set_xlabel('Tamanho familia')
eixo.set_ylabel('Resíduo')

import seaborn as sns

eixo = sns.scatterplot(x=df.renda_familiar, y=residuo)
eixo.set_xlabel('Renda familiar')
eixo.set_ylabel('Resíduo')



"""Valores de R² e R² ajustado"""

print(modelo.summary())

""" Significâncias estatísticas dos B"""

print(modelo.summary())

"""**Bruna, aqui eu fiquei bem na duvida, se eu sigo semelhante ao anterior, ou se sigo semelhante ao exercicio 5 por exemplo. **
Não sei como desenvolvo um exercicio regressão linear multiplo. 
DEpois de ter realizado todos os outros eu voltei e fiz dessa forma mas fiquei na duvida se está correto.

Para os exercícios 03 a 10 defina:
* Quais as correlações existentes?
* (Quando Regressão Linear Múltipla) Existe colinearidade?
* Quais as variáveis dependente e independente(s) do modelo?
* Treine o modelo
* Quais os valores para B0 e para os demais coeficientes?
* Qual é a equação que descreve o comportamento dos dados?
* Quais os valores de y previsto pelo modelo?
* Quais os valores de resíduo do modelo?
* Apresente o gráfico de dispersão do resíduo.
* Quais os valores de R² e R² ajustado?
* Quais as significâncias estatísticas dos B?

### Exercício 03

Você consegue prever a nota de um estudante de acordo com a quantidade de horas que ele estudou para uma prova?
"""

import pandas as pd
import numpy as np


df = pd.DataFrame({'estudante': np.arange(10),
                   'horas_estudo': [1,5,7,8,10,11,14,15,15,19],
                   'notas': [53,74,59,43,56,84,96,69,84,83]})
df.head()

"""Correlações"""

df.notas.corr(df.horas_estudo)

# Definir variaveis: Y - Notas (dependente) X - Horas de estudo (independente)
x = df[['horas_estudo']]
y = df['notas']

"""Treinamento do modelo"""

# stastmodel
#Importação do pacote
import statsmodels.api as sm

# Adição de uma coluna para calcular B0
x = sm.add_constant(x)

# Treinamento do modelo
modelo_sm = sm.OLS(y,x).fit()

#Scikit-Learn
# Importação do pacote
from sklearn.linear_model import LinearRegression

# Instanciando o objeto
modelo_sl = LinearRegression()

#Treinando o modelo
modelo_sl.fit(x,y)

"""Coeficientes"""

# Statsmodel:
print(modelo_sm.params)

#Scikit-Learn:
print('B0:', modelo_sl.intercept_)
print('B1:', modelo_sl.coef_)

"""Equação que descreve comportamento:

Y= B0 + B1*x1

Y = 49.477 + 1.941*X1

Y previsto pelo modelo:
"""

#Statsmodel
y_pred_sm = modelo_sm.predict(x)
print(y_pred_sm)

#Scikit-Learn
y_pred_sl = modelo_sl.predict(x)
print(y_pred_sl)

"""Resíduo: """

# Valor da variável dependente
y_real = y
# Variável prevista por um dos modelos
y_pred = y_pred_sm
residuo = y_real - y_pred
print(residuo)

"""Grafico de dispersão do ruido"""

# Importação da biblioteca de visualização
import seaborn as sns

eixo = sns.scatterplot(x=df.horas_estudo, y=residuo)
eixo.set_xlabel('Horas de estudo')
eixo.set_ylabel('Resíduo')

"""Valores R² e R² ajustado:"""

#Statsmodel
print(modelo_sm.summary())

#Scikit-Learn:
r_quadrado = modelo_sl.score(x,y)
print(r_quadrado)

# Número de amostras
n_amostras = df.shape[0]
# Quantidade de variáveis explicativas
p = 1
# Cálculo do r quadrado ajustado
r_quadrado_adj = 1-(1-r_quadrado)*(n_amostras-1)/(n_amostras-p-1)
print(r_quadrado_adj)

"""Quais as significâncias estatísticas dos B:"""

#Statsmodel:
print(modelo_sm.summary())

"""### Exercício 04

(MATTAR,2001) Uma empresa produtora de bens de consumo de massa levantou um histórico de dez anos das vendas, em milhares de unidades, de um produto, os investimentos, em milhões de reais, em comunicação( propaganda, promoção de vendas, etc.) e o número de vendedores para o mesmo produto. Crie um modelo de regressão linear para prever as vendas da empresa.
"""

import pandas as pd

df = pd.DataFrame({'ano': [1983,1984,1985,1986,1987,1989,1990,1991,1992,1993],
                   'comunicacao': [9.5,6.5,7.0,8.0,7.5,8.5,7.5,5.5,8.0,6.0],
                   'num_vendedores': [10,8,9,12,15,11,13,7,15,10],
                   'vendas':[95,60,60,80,80,80,85,60,85,65]})
df.head()

"""Correlações"""

df.corr()

"""Existe colinearidade? não"""

# Definir variaveis: Y - Vendas (dependente) X - Comunicação e número de vendedores (independentes)
x = df[['comunicacao', 'num_vendedores']]
y = df['vendas']

"""Treinamento modelo:"""

#Statsmodel

# Importação do pacote
import statsmodels.api as sm

# Adição de uma coluna para calcular B0
x = sm.add_constant(x)

# Treinamento do modelo
modelo_sm = sm.OLS(y,x).fit()

#Scikit-Learn:
# Importação do pacote
import statsmodels.formula.api as sm

# Definições das variáveis dependente e independentes
modelo_def = 'vendas~comunicacao+num_vendedores'

modelo_sm2 = sm.ols(formula=modelo_def, data=df).fit()

"""Coeficientes"""

print(modelo_sm2.params)

"""Equação que descreve o comportamento:
Y = 1,67 + 7,66* X1 + 1,51* X2
 
X1 - Comunicação

X2 - Número de vendedores

Y previsto pelo modelo
"""

y_pred = modelo_sm.predict(x)
print(y_pred)

"""Resíduo"""

residuo = y_real - y_pred
print(residuo)

"""Gráfico de dispersão do ruído"""

# Importação da biblioteca de visualização
import seaborn as sns

eixo = sns.scatterplot(x=df.comunicacao, y=residuo)
eixo.set_xlabel('Comunicação')
eixo.set_ylabel('Resíduo')

import seaborn as sns

eixo = sns.scatterplot(x=df.num_vendedores, y=residuo)
eixo.set_xlabel('num_vendedores')
eixo.set_ylabel('Resíduo')

"""Valores R² e R² ajustado:"""

print(modelo_sm.summary())

"""Significâncias estatísticas dos B"""

print(modelo_sm.summary())



"""### Exercício 05

Crie um modelo de Regressão Linear para prever o preço do índice de ações considerando as duas possíveis variáveis de entrada:

* Taxa de juro
* Taxa de desemprego
"""

import pandas as pd

mercado_de_acoes = {'ano': [2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016],
                'mes': [12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1],
                'taxa_juro': [2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75],
                'taxa_desemprego': [5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5.9,6.2,6.2,6.1],
                'preco_indice_acoes': [1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047,965,943,958,971,949,884,866,876,822,704,719]        
                }

df = pd.DataFrame(mercado_de_acoes,columns=['ano','mes','taxa_juro','taxa_desemprego','preco_indice_acoes']) 

df.head()

"""Correlacoes """

df.corr()

"""Existe colinearidade? Sim"""

df.taxa_juro.corr(df.taxa_desemprego)

# Definir variaveis: Y - Preço do índice de ações (dependente) X - Taxa de juro e taxa de desemprego (independentes)
x = df[['taxa_juro','taxa_desemprego']]
y = df['preco_indice_acoes']

"""Treinamento do modelo"""

# Importação da biblioteca
import statsmodels.api as sm

# Adição da constante para calcular B0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes:"""

print(modelo.params)

"""Equação que descreve o comportamento:
Y = 1798.40 + 345.54 * X1 - 250.14 * X2

Y previsto pelo modelo:
"""

y_pred = modelo.predict(x)
print(y_pred)

"""Resíduo"""

y_real = y
residuo = y_real - y_pred
print(residuo)

"""Gráfico de dispersão do ruído:"""

# Importação da biblioteca de visualização
import seaborn as sns

eixo = sns.scatterplot(x=df.taxa_juro, y=residuo)
eixo.set_xlabel('Taxa de juro')
eixo.set_ylabel('Resíduo')

import seaborn as sns

eixo = sns.scatterplot(x=df.taxa_desemprego, y=residuo)
eixo.set_xlabel('Taxa de desemprego')
eixo.set_ylabel('Resíduo')

"""Valores de R² e R² ajustado"""

print(modelo.summary())

"""Significâncias estatísticas dos B:"""

print(modelo.summary())

"""### Exercício 06

Considere um experimento em que se analisa a octanagem da gasolina em função da adição de um novo aditivo (em %). Descreva um modelo de regressão linear para descrever esse comportamento.
"""

import pandas as pd

df = pd.DataFrame({'octanagem':[80.5,81.6,82.1,83.7,83.9,85],
                   'aditivo':[1,2,3,4,5,6]})
df.head()

"""Correlações"""

df.corr()

"""Existe colinariedade? não """

df.octanagem.corr(df.aditivo)

# variaveis 
y = df['octanagem']
x = df[['aditivo']]

"""Treinando modelo"""

# Importação da biblioteca
import statsmodels.api as sm

# Adição da constante para calcular B0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes"""

print(modelo.params)

"""Previsão do x"""

y_pred = modelo.predict (x)

"""Residuo"""

residuo = y - y_pred

"""Visualização do R² e R² ajustado:"""

print(modelo.summary())

"""Grafico do Residuo:"""

import seaborn as sns

eixo = sns.scatterplot(x = df.aditivo, y = residuo)
eixo.set_xlabel('Aditivo')
eixo.set_ylabel('Residuo')

"""### Exercício 07

Foram coletadas as informações de consumo de água e de temperatura em uma determinada empresa. Crie um modelo capaz de relacionar as variáveis.
"""

import pandas as pd

df = pd.DataFrame({'temperatura':[77,86,71,75,85,83,72,79,89,80,84,76],
                   'consumo':[89,171,58,76,139,130,78,115,182,130,154,105]})
df.head()

"""Colinearidade? não

Correlações
"""

df.temperatura.corr(df.consumo)

#variaives
y = df.consumo
x = df[['temperatura']]

"""Treinando modelo:"""

# Importação da biblioteca
import statsmodels.api as sm

# Adição da constante - para calcular b0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes"""

print(modelo.params)

"""Equação que descreve o modelo Y = 6.61* X1 - 408.071

Y previsto modelo
"""

y_pred = modelo.predict(x)

"""Residuo"""

residuo = y - y_pred

"""Gráfico de dispersão do resíduo"""

# Importação da biblioteca de visualização
import seaborn as sns

sns.scatterplot(x=df['temperatura'],y=residuo)

"""Valores de R² e R² ajustado"""

print(modelo.summary())

"""### Exercício 08

Um banco pretende estudar a relação entre o volume de vendas de seguros efetuadas durante um dado período de tempo por seus vendedores, considerando seus anos de experiência e seu score num teste de inteligência.
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/brunamulinari/DataBasesPython/master/Exercicios/Exercicio%2010%20-%20RegMult.csv', delimiter=';',decimal=',')
df.head()

# Como a coluna interações não importa:
df = df.drop(columns='interacao')
df.head()

"""Correlacoes:"""

df.corr()

"""Colinearidade? não"""

#variáveis 
x = df[['Anos de experiencia ','Score no Teste']]
y = df[' Vendas ']

"""Treinando modelo:"""

#Importação da biblioteca
import statsmodels.api as sm

# Adição da constante - para calcular b0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes"""

print(modelo.params)

"""Equação que descreve o modelo
Y = -10.157 + 1.469 * X1 + 13.48 * X2

Y previsto para modelo
"""

y_pred = modelo.predict(x)
print(y_pred)

"""Residuo """

residuo = y - y_pred
print(residuo)

"""Gráfico de dispersão do resíduo"""

# Resíduo para a variável score

import seaborn as sns

sns.scatterplot(x=df['Score no Teste'],y=residuo)

# Resíuduo para a variável anos de experiência

import seaborn as sns

sns.scatterplot(x=df['Anos de experiencia '],y=residuo)

"""valores de R² e R² ajustado"""

print(modelo.summary())

"""### Exercício 09

Uma empresa pretende analisar os gastos de manutenção com sua frota de veículos de um  mesmo modelo considerando  a quilometragem inicial  do veículo e a diferença  dessa quilometragem desde a aquisição do automóvel.
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/brunamulinari/DataBasesPython/master/Exercicios/Exercicio%209%20-%20RegMult.csv', delimiter=';',decimal=',')
df.head()

# Como a coluna interações não importa:
df = df.drop(columns='interacao')
df.head()

"""Correlacoes """

df.corr()

"""Colinearidade? não"""

#variáveis
x = df[['KM_Inicial','Km_Diferenca']]
y = df['Total']

"""Treinando modelo"""

# Importação da biblioteca
import statsmodels.api as sm

# Adição da constante - para calcular b0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes"""

print(modelo.params)

"""Equação que descreve o comportamento dos dados Y = -109.248 + 0.036* X1 + 0.056*X2

Y previsto pelo modelo
"""

y_pred = modelo.predict(x)
print(y_pred)

"""Residuos"""

residuo = modelo.resid
print(residuo)

"""Gráfico de dispersão do resíduo"""

# Resíduo para Km inicial
import seaborn as sns

sns.scatterplot(x=df['KM_Inicial'],y=residuo)

# Resíduo para Km diferença
import seaborn as sns

sns.scatterplot(x=df['Km_Diferenca'],y=residuo)

"""Valores de R² e R² ajustado"""

print(modelo.summary())

"""### Exercício 10

Uma empresa pretende analisar o tempo médio do processo  de atendimento observando  o turno de entrada dos funcionários e o tempo de experiência deles. Os turnos de trabalho analisados foram  manhã e tarde e o tempo de experiência é dado em dias.
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/brunamulinari/DataBasesPython/master/Exercicios/Exercicio%208%20-%20RegMult.csv', delimiter=';',decimal=',')
df.head()

"""* Necessário fazer dummy com a variável turno de trabalho:"""

turno_manha = {'M':1, 'T':0}

df['turno_manha'] = df['Turno'].map(turno_manha)

turno_tarde = {'M':0, 'T':1}

df['turno_tarde'] = df['Turno'].map(turno_tarde)

df.head()

"""Correlações"""

df.corr()

"""Colinearidade? não"""

#variaveis 
x = df[['Experiencia','turno_manha','turno_tarde']]
y = df['TMP']

"""Treinando modelo:"""

# Importação da biblioteca
import statsmodels.api as sm

# Adição da constante - para calcular b0
x = sm.add_constant(x)

# Treinamento do modelo
modelo = sm.OLS(y,x).fit()

"""Coeficientes"""

print(modelo.params)

"""Equação que descreve o comportamento dos dados

Y = 123.284 - 0.063* X1 + 56.089* X2 + 67.193* X3

Y previsto pro modelo
"""

y_pred = modelo.predict(x)
print(y_pred)

"""Gráfico de dispersão do resíduo"""

import seaborn as sns

sns.scatterplot(x=df['Experiencia'],y=residuo)

import seaborn as sns

sns.scatterplot(x=df['turno_manha'],y=residuo)

sns.scatterplot(x=df['turno_tarde'],y=residuo)

"""Valores de R² e R² ajustado"""

print(modelo.summary())

"""Bruna, oii 

Queria dizer que adorei a ideia de bastante exercicios. 
Primeiramente precisei voltar la nos slides e nos primeiros exercicios e fazer uma lista do que precisa pra fazer as regressões, e ai eu  a partir do segundo exercicio eu consegui entender a logica já de como fazer. 

Onde cada coisa estava. 
Fui observandos os seus, mas entendia onde cada coisa estava. 

Muito obrigada pela sua atenção em preparar o material bem detalhado. 

Como eu não vejo isso todo dia, e é totalmente novo, confesso que se eu ficar uma semana sem mexer eu ja esqueci tudo das aulas. Então o conteudo escrito é uma super mão na roda. O video está lá, mas ficar 4 horas procurando uma duvida nem sempre da certo. 

Eu fiquei na duvida no n2 só,deixei um comentário pra ser se está certo. 

Obrigada mesmo, até o proximo modulo.

## Extra

Material sobre regressão linear do [MIT](http://www.mit.edu/~6.s085/notes/lecture3.pdf).

Outras métricas que podemos utilizar para avaliarmos nossos modelos ([Texto](https://medium.com/turing-talks/como-avaliar-seu-modelo-de-regress%C3%A3o-c2c8d73dab96)).
"""